create or replace table yelp_reviews (review_text variant)

COPY INTO yelp_reviews
FROM 's3://myyelps/yelps/'
CREDENTIALS = (
      AWS_KEY_ID = 'AKIA5FTZCBAVQV3ZSGNK'
      AWS_SECRET_KEY = 'pbY2z6NKwcE8ZYOQKlHkw3tegGKUOJ1WocuDQb3F'
)
FILE_FORMAT = (TYPE = JSON );

create or replace table tbl_yelp_business as 
select 
    business_text:business_id:: string as business_id,
    business_text:name:: string as name,
    business_text:city:: string as city,
    business_text:state:: string as state,
    business_text:review_count::string as review_count,
    business_text:stars:: number as stars,
    business_text:categories:: string as categories,
from yelp_business 

REDENTIALS = (
      AWS_KEY_ID = 'AKIA5FTZCBAVQV3ZSGNK'
      AWS_SECRET_KEY = 'pbY2z6NKwcE8ZYOQKlHkw3tegGKUOJ1WocuDQb3F'
)
FILE_FORMAT = (TYPE = JSON );

create or replace table tbl_yelp_reviews as 
select 
       review_text:business_id::string as business_id,
       
       review_text:date :: date as review_date,
       review_text:user_id:: string as user_id,
       review_text:stars :: number as review_stars,
       review_text:text :: string as review_text,
       analyze_sentiment(review_text) as sentiments 

from yelp_reviews 
--applying sentiment analysis
CREATE OR REPLACE FUNCTION analyze_sentiment(text STRING)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.8'
PACKAGES = ('textblob') 
HANDLER = 'sentiment_analyzer'
AS $$
from textblob import TextBlob
def sentiment_analyzer(text):
    analysis = TextBlob(text)
    if analysis.sentiment.polarity > 0:
        return 'Positive'
    elif analysis.sentiment.polarity == 0:
        return 'Neutral'
    else:
        return 'Negative'
$$;

select * from tbl_yelp_business limit 10;
select * from tbl_yelp_reviews limit 100;
--finding the number of businesss
with cte as (select 
    business_id,trim(A.value) as category 
from tbl_yelp_business,
     lateral split_to_table(categories,',') A
)
select 
    category ,count(*) as no_of_business 
    from cte
    group by 1
    order by 2 desc

--2 finding the top 10 users who have reviewed the most business in the 'Restaurants'
select r.user_id,count(distinct r.business_id)
   from tbl_yelp_reviews r
   inner join tbl_yelp_business b on r.business_id = b.business_id
   where b.categories ilike '%restaurants%'
   group by 1 
   order by 2 desc
   limit 100

--3 Finding the most popular categories of business ( based on the number of reviews)
 with cte as (
 select 
    business_id,trim(A.value) as category 
 from tbl_yelp_business,
     lateral split_to_table(categories,',') A
    )
select category,count(*) as number_of_reviews
     from cte 
INNER JOIN tbl_yelp_reviews r ON cte.business_id = r.business_id
    group by 1 
    order by 2 desc

--Finding the top 3 most recent reviews for each business 
with cte as (select 
      r.*,b.name ,
      row_number() over(partition by r.business_id order by review_date desc) as rn
from 
    tbl_yelp_reviews r
inner join 
    tbl_yelp_business b on r.business_id = b.business_id)

select * from cte where rn <=3 

-- Finding the month with the highest number of reviews

select 
    month(review_date) as month,count(*) as no_of_reviews
from tbl_yelp_reviews
    group by 1
    order by 2 desc

--Find the percentage of 5 star reviews

SELECT 
    b.business_id,
    b.name, 
    (COUNT(CASE WHEN r.review_stars = 5 THEN 1 ELSE NULL END) * 100.0) / COUNT(r.review_stars) AS perc
FROM tbl_yelp_reviews r
INNER JOIN tbl_yelp_business b 
    ON r.business_id = b.business_id
GROUP BY 1, 2 order by 3 desc


--finding the top 5 most reviews business in each city 


with cte as (SELECT 
    b.business_id,
    b.name,
    b.city , 
    count(*) as total_reviews
FROM tbl_yelp_reviews r
INNER JOIN tbl_yelp_business b 
    ON r.business_id = b.business_id
GROUP BY 1, 2 ,3)

 select *,     
 FROM 
  cte
  qualify row_number() over(partition by city order by total_reviews) <=5

  --Finding the average rating of business that have at least 100 reviews

  SELECT 
    b.business_id,
    b.name, 
    count(*) as total_reviews,
    avg(review_stars) as avg_rating
FROM tbl_yelp_reviews r
INNER JOIN tbl_yelp_business b 
    ON r.business_id = b.business_id
GROUP BY 1,2 
having count(*)>=100

--list the top 10 users who have written the most reviews,along with the business they have reviewd 
 with cte as (SELECT 
    r.user_id,
    count(*) as total_reviews
FROM tbl_yelp_reviews r
INNER JOIN tbl_yelp_business b 
    ON r.business_id = b.business_id
GROUP BY 1
ORDER BY 2 desc 
limit 10
)
select 
  user_id,business_id,
  FROM tbl_yelp_reviews
  WHERE user_id in ( select user_id from cte)
  group by 1,2
  ORDER by user_id

---finding the top 10 business with the highest positive sentiment reviews 

SELECT 
    r.business_id,b.name,
    count(*) as total_reviews
FROM tbl_yelp_reviews r
INNER JOIN tbl_yelp_business b 
    ON r.business_id = b.business_id
WHERE sentiments = 'Positive'
GROUP BY 1,2
ORDER BY 3 desc 

